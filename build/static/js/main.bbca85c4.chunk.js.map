{"version":3,"sources":["components/items/BreedImage.js","components/items/BreedCard.js","components/pages/CatDex.js","components/pages/Login.js","components/pages/Register.js","components/pages/SearchCat.js","components/pages/Summon.js","components/pages/Team.js","components/pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["BreedImage","props","useState","imageURL","setImageURL","headers","useEffect","axios","get","race","then","response","data","url","src","alt","BreedCard","className","breed","name","id","CatDex","breeds","setBreeds","console","log","length","map","key","Login","Register","username","setUsername","password","setPassword","handleChange","event","target","value","onSubmit","preventDefault","user","res","type","onChange","SearchCat","Summon","Team","Home","App","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bbca85c4.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport axios from \"axios\";\n\nconst BreedImage = (props) => {\n\n  const [imageURL, setImageURL] = useState({});\n  const headers = {\n    'x-api-key': '80ad793a-81c0-4987-a01a-cdf448c1b68d'\n  }\n\n  useEffect(() => {\n    axios.get(\"https://api.thecatapi.com/v1/images/search?breed_ids=\" + props.race, {headers}).then(response => {\n      setImageURL(response.data[0].url);\n    });\n  }, []);\n\n  return (\n    <img src={imageURL} alt=\"\"></img>\n  );\n}\n\nexport default BreedImage;\n","import React from \"react\";\nimport BreedImage from \"./BreedImage.js\";\n\nconst BreedCard = (props) => {\n\n  return (\n      <figure className=\"breedCard\">\n          <figcaption>{props.breed.name}</figcaption>\n          <BreedImage race={props.breed.id} />\n      </figure>\n  );\n}\n\nexport default BreedCard;","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport BreedCard from \"../items/BreedCard.js\"\n\nconst CatDex = props => {\n  const [breeds, setBreeds] = useState([]);\n\n  const headers = {\n    'x-api-key': '80ad793a-81c0-4987-a01a-cdf448c1b68d'\n  }\n\n  useEffect(() => {\n    axios.get(\"https://api.thecatapi.com/v1/breeds\", {headers}).then(response => {\n      setBreeds(response.data);\n    });\n  }, []);\n\n  console.log(breeds)\n  if (breeds.length == 0) {\n    return (\n      <div>\n        <h1>CatDex</h1>\n        <p>Chargement...</p>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <h1>CatDex</h1>\n      <ul className=\"catDex\">\n        {breeds.map(function(breed) {\n          return (\n              <li key={breed.id}><BreedCard breed={breed} /></li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\n\nexport default CatDex;","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst Login = props => {\n\n  return (\n    <div>\n        <h1>Login</h1>\n        <p>bonsoir</p>\n    </div>\n  );\n};\n\n\nexport default Login;","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst Register = props => {\n    const [username, setUsername] = useState({});\n    const [password, setPassword] = useState({});\n\n    const handleChange = event => {\n        switch (event.target.name) {\n            case 'username':\n                setUsername(event.target.value)\n                break;\n\n            case 'password':\n                setPassword(event.target.value)\n                break;\n        \n            default:\n                break;\n        }\n        console.log(event.target)\n    }\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n\n\n\n        const user = {\n            username: username,\n            password: password\n        };\n\n        console.log(user);\n\n        axios.get(`stark.mmi-unistra.fr:25565/users`).then(res => {\n            console.log(res)\n        })\n\n        // axios.post(`stark.mmi-unistra.fr:25565/users`, { user })\n        // .then(res => {\n        //     console.log(res);\n        //     console.log(res.data);\n        // })\n    }\n\n    return (\n        <div>\n            <h1>Inscription</h1>\n            <form onSubmit={handleSubmit}>\n                <ul>\n                    <li>\n                        <label>Identifiant : </label>\n                        <input type=\"text\" name=\"username\" onChange={handleChange}></input>\n                    </li>\n                    <li>\n                        <label>Mot de passe : </label>\n                        <input type=\"password\" name=\"password\" onChange={handleChange}></input>\n                    </li>\n                    <button>S'inscrire</button>\n                </ul>\n            </form>\n        </div>\n    );\n};\n\n\nexport default Register;","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst SearchCat = props => {\n\n  return (\n    <div>\n        <h1>Search Cat</h1>\n        <p>bonsoir</p>\n    </div>\n  );\n};\n\n\nexport default SearchCat;","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst Summon = props => {\n\n  return (\n    <div>\n        <h1>Summon</h1>\n        <p>bonsoir</p>\n    </div>\n  );\n};\n\n\nexport default Summon;","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst Team = props => {\n\n  return (\n    <div>\n        <h1>Team</h1>\n        <p>bonsoir</p>\n    </div>\n  );\n};\n\n\nexport default Team;","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst Home = props => {\n\n  return (\n    <div>\n        <h1>Home</h1>\n        <p>bonsoir</p>\n    </div>\n  );\n};\n\n\nexport default Home;","import React, { Component } from 'react';\nimport { Switch, Route, Redirect, Link } from 'react-router-dom';\nimport './App.css';\nimport CatDex from \"./components/pages/CatDex.js\";\nimport Login from \"./components/pages/Login.js\";\nimport Register from \"./components/pages/Register.js\";\nimport SearchCat from \"./components/pages/SearchCat.js\";\nimport Summon from \"./components/pages/Summon.js\";\nimport Team from \"./components/pages/Team.js\";\n\nimport Home from \"./components/pages/Home.js\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav>\n        <ul>\n          <li><Link to='/'>Accueil</Link></li>\n          <li><Link to='/search_cat'>Partir à l'aventure</Link></li>\n          <li><Link to='/summon'>Invoquer un chat</Link></li>\n          <li><Link to='/team'>Mon équipe</Link></li>\n          <li><Link to='/catdex'>CatDex</Link></li>\n          <li><Link to='/login'>Connexion</Link></li>\n          <li><Link to='/register'>Inscription</Link></li>\n        </ul>\n      </nav>\n      \n\n\n      <Switch>\n        <Route path='/login' component={Login} />\n        <Route path='/register' component={Register} />\n        <Route path='/search_cat' component={SearchCat} />\n        <Route path='/summon' component={Summon} />\n        <Route path='/team' component={Team} />\n        <Route path='/catdex' component={CatDex} />\n        <Route path='/' component={Home} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n  );\n  \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}